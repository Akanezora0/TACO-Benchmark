{
  "sql": "SELECT ssa.OBJECTID, ssa.RchID, ssa.SegID FROM salt_storage_record_table ssrt JOIN sga_phase_2_assessed_reaches ssa ON ssrt.fulcrum_id = ssa.RchID WHERE ssa.OBJECTID IN (SELECT ssa.OBJECTID FROM sga_phase_2_assessed_reaches ssa WHERE ssa.ProjectID = 'specific_project_id')",
  "problem_description": "### Query intent:\nThe SQL statement aims to select specific data from two related tables (`salt_storage_record_table` and `sga_phase_2_assessed_reaches`) based on certain conditions.\n\n### Detailed description:\n1. **Table `salt_storage_record_table`**:\n   - This table likely contains records related to storage activities or inventory of salt.\n   - The columns selected for output are `OBJECTID`, `RchID`, and `SegID`.\n   - `OBJECTID` is likely a unique identifier for each record.\n   - `RchID` and `SegID` could relate to the route or segment ID associated with the storage location.\n\n2. **Table `sga_phase_2_assessed_reaches`**:\n   - This table seems to contain assessments or evaluations related to routes or segments.\n   - The column `OBJECTID` is used as a common identifier across both tables, linking records between them.\n   - `RchID` in this table might correspond to the route ID, matching the same column in the `salt_storage_record_table`.\n\n3. **Join operation**:\n   - The `JOIN` clause links the two tables using the `fulcrum_id` column from `salt_storage_record_table` and `RchID` from `sga_phase_2_assessed_reaches`.\n   - This join allows the retrieval of records from `salt_storage_record_table` where the `fulcrum_id` matches an `RchID` found in `sga_phase_2_assessed_reaches`.\n\n4. **Filtering condition**:\n   - The `WHERE` clause filters records in the joined table further by checking if the `OBJECTID` exists in another subquery.\n   - This subquery selects `OBJECTID`s from `sga_phase_2_assessed_reaches` where the `ProjectID` is a specific project ID ('specific_project_id').\n   - Thus, the final result will only include records from `salt_storage_record_table` that have corresponding entries in `sga_phase_2_assessed_reaches` for the specified project.\n\n### Business scenario:\nThis SQL statement is typically used in a business context where there is a need to correlate storage activities with specific projects for assessment purposes. For example, in a salt storage management system, one might want to analyze how much salt was stored and its status for a particular project that has undergone a series of assessments.\n\n### User description:\nA user might require this data to perform a detailed analysis of salt storage efficiency",
  "natural_language_query": "I'm trying to pull some specific data for a project I'm working on. I need information from two related tables: `salt_storage_record_table` and `sga_phase_2_assessed_reaches`. Specifically, I'm interested in the `OBJECTID`, `RchID`, and `SegID` fields from the `salt_storage_record_table`. There's also a table called `sga_phase_2_assessed_reaches` which I think holds details about assessments for certain routes. I'd like to see how these two tables connect, so I want to join them based on a common identifier, possibly the `fulcrum_id` from one table and the `RchID` from the other. But here's the tricky part: I'm only interested in records where the `OBJECTID` from the `salt_storage_record_table` matches those found in the `sga_phase_2_assessed_reaches` table for a specific project I'm focusing on. Could you help me put this together in a query?",
  "results": 0,
  "sql skeleton": "select _ ,_ ,_ from _ where _ in (select _ from _ where _ )",
  "database": "Vermont Center for... - 96",
  "tables": {
    "salt_storage_record_table": [
      "salt_storage_record_table.OBJECTID",
      "salt_storage_record_table.fulcrum_id",
      "salt_storage_record_table.fulcrum_parent_id",
      "salt_storage_record_table.fulcrum_record_id",
      "salt_storage_record_table.version",
      "salt_storage_record_table.geometry",
      "salt_storage_record_table.created_at",
      "salt_storage_record_table.updated_at",
      "salt_storage_record_table.created_by",
      "salt_storage_record_table.updated_by",
      "salt_storage_record_table.address_sub_thoroughfare",
      "salt_storage_record_table.address_thoroughfare",
      "salt_storage_record_table.address_suite",
      "salt_storage_record_table.address_locality",
      "salt_storage_record_table.address_sub_admin_area",
      "salt_storage_record_table.address_admin_area",
      "salt_storage_record_table.address_postal_code",
      "salt_storage_record_table.address_country",
      "salt_storage_record_table.address_full",
      "salt_storage_record_table.material_type",
      "salt_storage_record_table.material_type_other",
      "salt_storage_record_table.storage_length_years",
      "salt_storage_record_table.storage_length_years_range",
      "salt_storage_record_table.material_covered",
      "salt_storage_record_table.coverage_method",
      "salt_storage_record_table.material_on_pad",
      "salt_storage_record_table.pad_type",
      "salt_storage_record_table.pad_type_other"
    ],
    "sga_phase_2_assessed_reaches": [
      "sga_phase_2_assessed_reaches.SGAT_ID",
      "sga_phase_2_assessed_reaches.ProjectName",
      "sga_phase_2_assessed_reaches.URLPage1",
      "sga_phase_2_assessed_reaches.URLPage2",
      "sga_phase_2_assessed_reaches.ReportList",
      "sga_phase_2_assessed_reaches.FinalA",
      "sga_phase_2_assessed_reaches.FinalB",
      "sga_phase_2_assessed_reaches.FinalC",
      "sga_phase_2_assessed_reaches.CorridorPlanA",
      "sga_phase_2_assessed_reaches.CorridorPlanB",
      "sga_phase_2_assessed_reaches.CorridorPlanC",
      "sga_phase_2_assessed_reaches.RID",
      "sga_phase_2_assessed_reaches.SID",
      "sga_phase_2_assessed_reaches.OBJECTID",
      "sga_phase_2_assessed_reaches.RchID",
      "sga_phase_2_assessed_reaches.SegID",
      "sga_phase_2_assessed_reaches.ProjectID"
    ]
  }
}