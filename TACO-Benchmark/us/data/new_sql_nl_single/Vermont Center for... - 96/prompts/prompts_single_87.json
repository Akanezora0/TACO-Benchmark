[
  {
    "idx": 87,
    "sql_query": "SELECT \n    public_water_sources.SystemName,\n    public_water_sources.WaterType,\n    public_water_sources.ConstructedDate \nFROM \n    public_water_sources \nWHERE \n    public_water_sources.WaterType = 'drinking';",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nSELECT \n    public_water_sources.SystemName,\n    public_water_sources.WaterType,\n    public_water_sources.ConstructedDate \nFROM \n    public_water_sources \nWHERE \n    public_water_sources.WaterType = 'drinking';\n\n请按照以下格式输出：\n- **Query intent**: briefly explain the purpose of the SQL statement.\n- **Detailed description**: explain in detail the tables, columns, conditions, and other information involved in the query.\n- **Business scenario**: what business scenarios the queried tables, columns, conditions, etc. can be used to solve.\n- **User description**: actual problems or needs that users may encounter in the above business scenarios.\n"
  },
  {
    "idx": 87,
    "problem_description": "### Query intent:\nThe SQL statement aims to select specific details from the `public_water_sources` table based on a predefined condition.\n\n### Detailed description:\n1. **Table**: The query targets the `public_water_sources` table, which presumably contains records about various water sources.\n2. **Columns**:\n   - `SystemName`: The name of the system associated with the water source.\n   - `WaterType`: The type of water (in this case, it's filtered to only include 'drinking').\n   - `ConstructedDate`: The date when the water source was constructed or became operational.\n3. **Condition**:\n   The `WHERE` clause filters the results so that only rows where `WaterType` is set to 'drinking' are included in the output.\n\n### Business scenario:\nThis SQL query could be used in a scenario where an organization needs to manage or audit its drinking water sources. For instance, an environmental agency might use this query to:\n\n- **Monitor compliance**: Ensure all drinking water systems comply with certain standards by checking their construction dates and types.\n- **Update records**: If there's a need to update the details of drinking water systems, this query helps identify which systems meet the criteria for modification.\n- **Planning**: When planning infrastructure improvements or new installations, knowing the details of existing drinking water sources can inform decisions on where to allocate resources.\n\n### User description:\nA user, possibly an environmental regulator or a facilities manager, might require this information to:\n- **Conduct regular inspections**: To verify that all drinking water systems are up-to-date and meet safety standards.\n- **Plan maintenance schedules**: By identifying drinking water sources constructed at certain times, maintenance teams can plan more efficiently, focusing on older systems that may need more attention.\n- **Emergency response**: In the event of a contamination alert, having a list of all drinking water systems (filtered by type) can help quickly identify which areas need immediate attention.",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **生成的文本为英文。**\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### Query intent:\nThe SQL statement aims to select specific details from the `public_water_sources` table based on a predefined condition.\n\n### Detailed description:\n1. **Table**: The query targets the `public_water_sources` table, which presumably contains records about various water sources.\n2. **Columns**:\n   - `SystemName`: The name of the system associated with the water source.\n   - `WaterType`: The type of water (in this case, it's filtered to only include 'drinking').\n   - `ConstructedDate`: The date when the water source was constructed or became operational.\n3. **Condition**:\n   The `WHERE` clause filters the results so that only rows where `WaterType` is set to 'drinking' are included in the output.\n\n### Business scenario:\nThis SQL query could be used in a scenario where an organization needs to manage or audit its drinking water sources. For instance, an environmental agency might use this query to:\n\n- **Monitor compliance**: Ensure all drinking water systems comply with certain standards by checking their construction dates and types.\n- **Update records**: If there's a need to update the details of drinking water systems, this query helps identify which systems meet the criteria for modification.\n- **Planning**: When planning infrastructure improvements or new installations, knowing the details of existing drinking water sources can inform decisions on where to allocate resources.\n\n### User description:\nA user, possibly an environmental regulator or a facilities manager, might require this information to:\n- **Conduct regular inspections**: To verify that all drinking water systems are up-to-date and meet safety standards.\n- **Plan maintenance schedules**: By identifying drinking water sources constructed at certain times, maintenance teams can plan more efficiently, focusing on older systems that may need more attention.\n- **Emergency response**: In the event of a contamination alert, having a list of all drinking water systems (filtered by type) can help quickly identify which areas need immediate attention.\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]