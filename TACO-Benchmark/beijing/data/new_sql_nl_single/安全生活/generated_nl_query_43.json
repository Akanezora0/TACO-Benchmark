{
  "sql": "select column1, column2 from table1 where condition = 'value' order by column3 asc",
  "problem_description": "### 查询意图：\n该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并按照指定的列进行升序排序，最终返回 `column1` 和 `column2` 两列的数据。\n\n### 详细描述：\n1. **涉及的表**：`table1` 是该查询的主要表，所有数据都从该表中获取。\n2. **涉及的列**：\n   - `column1` 和 `column2`：查询结果中需要返回的列。\n   - `condition`：用于筛选数据的条件列。\n   - `column3`：用于对结果进行排序的列。\n3. **条件**：`condition = 'value'` 表示只选择 `condition` 列的值等于 `'value'` 的行。\n4. **排序**：`order by column3 asc` 表示查询结果将按照 `column3` 列的值升序排列（从小到大）。\n\n### 业务场景：\n1. **数据筛选与展示**：该查询可以用于从大量数据中筛选出符合特定条件的数据，并以有序的方式展示给用户。例如，筛选出某个特定状态（如“已完成”）的订单，并按照创建时间排序。\n2. **报表生成**：在生成报表时，可能需要提取特定条件下的数据并按照某种顺序排列，以便于分析或展示。\n3. **数据导出**：在需要导出部分数据时，可以通过该查询筛选出符合条件的数据并按照某种规则排序。\n\n### 用户描述：\n1. **问题或需求**：用户可能需要查看某个特定条件下的数据，并且希望这些数据能够按照某种逻辑顺序排列。例如：\n   - 一个电商平台的运营人员可能需要查看所有“已发货”的订单，并按照发货时间升序排列，以便跟踪最近的发货情况。\n   - 一个客服人员可能需要查看所有“高优先级”的客户投诉，并按照提交时间排序，以便优先处理最早的投诉。\n2. **实际场景**：用户在实际操作中可能面临数据量大、难以手动筛选和排序的问题，因此需要通过 SQL 查询快速、准确地获取所需数据。",
  "natural_language_query": "市民反映，我在系统里想查一些特定的信息，但是数据太多了根本找不到。我需要找那些状态显示为\"已完成\"的记录，最好能按照时间顺序从早到晚排好。比如说我们公司处理客户订单的时候，经常要查已经完成的订单，但是系统默认显示太乱了，希望能帮我整理成按照完成时间排序的清单，这样方便我们跟进最早完成的那些订单。现在的情况是每次都要手动筛选特别麻烦，能不能帮忙解决一下这个查询问题？",
  "results": 0,
  "sql skeleton": "select _ ,_ from _ where _ = _ order by _",
  "database": "安全生活",
  "tables": {}
}