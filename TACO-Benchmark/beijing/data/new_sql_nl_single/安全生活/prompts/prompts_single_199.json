[
  {
    "idx": 199,
    "sql_query": "select column1, column2, column3, column4, column5 from table1 where condition = 'value'",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect column1, column2, column3, column4, column5 from table1 where condition = 'value'\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 199,
    "problem_description": "### **查询意图**  \n该 SQL 语句的目的是从 `table1` 表中筛选出符合 `condition = 'value'` 条件的数据，并返回 `column1` 至 `column5` 这五个列的值。\n\n---\n\n### **详细描述**  \n1. **涉及的表**：  \n   - `table1`：该查询的主要数据来源表，具体业务含义需结合实际情况（如可能是用户表、订单表、产品表等）。  \n\n2. **涉及的列**：  \n   - `column1, column2, column3, column4, column5`：需要查询的具体字段，可能是表的属性（如用户ID、姓名、订单金额、日期等）。  \n   - `condition`：筛选条件字段，其值需等于 `'value'`（如 `status = 'active'` 或 `category = 'electronics'`）。  \n\n3. **筛选条件**：  \n   - `condition = 'value'`：仅返回 `condition` 列的值等于 `'value'` 的记录（如状态为“已完成”的订单，或部门为“销售”的员工）。  \n\n---\n\n### **业务场景**  \n1. **示例场景**：  \n   - 如果 `table1` 是订单表，`condition` 是订单状态（`status`），`'value'` 是 `'shipped'`，则查询可能是为了获取所有已发货订单的核心信息（如订单ID、客户ID、发货日期等）。  \n   - 如果 `table1` 是用户表，`condition` 是用户类型（`user_type`），`'value'` 是 `'premium'`，则查询可能是为了提取所有高级会员的详细信息（如姓名、注册时间、联系方式等）。  \n\n2. **通用用途**：  \n   - 数据筛选：从大表中提取符合特定条件的子集。  \n   - 报表生成：为业务分析提供特定状态或类别的数据。  \n\n---\n\n### **用户描述**  \n1. **实际问题**：  \n   - 用户可能需要快速查看某一类数据（如“所有未处理的客服工单”或“特定地区的销售记录”），但手动筛选效率低下。  \n   - 业务部门需要定期统计特定状态的数据（如每周活跃用户、库存不足的商品），用于决策支持。  \n\n2. **用户需求**：  \n   - 通过简单的条件查询，高效获取目标数据，避免全表扫描。  \n   - 仅关注关键字段（如查询订单时不需要返回冗余的备注信息），提升查询性能和结果可读性。  \n\n---\n\n### **补充说明**  \n- 实际业务中，`condition` 和 `'value'` 需替换为具体字段和值（如 `status = 'completed'`）。  \n- 若 `table1` 数据量庞大，建议对 `condition` 字段建立索引以优化查询速度。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**  \n该 SQL 语句的目的是从 `table1` 表中筛选出符合 `condition = 'value'` 条件的数据，并返回 `column1` 至 `column5` 这五个列的值。\n\n---\n\n### **详细描述**  \n1. **涉及的表**：  \n   - `table1`：该查询的主要数据来源表，具体业务含义需结合实际情况（如可能是用户表、订单表、产品表等）。  \n\n2. **涉及的列**：  \n   - `column1, column2, column3, column4, column5`：需要查询的具体字段，可能是表的属性（如用户ID、姓名、订单金额、日期等）。  \n   - `condition`：筛选条件字段，其值需等于 `'value'`（如 `status = 'active'` 或 `category = 'electronics'`）。  \n\n3. **筛选条件**：  \n   - `condition = 'value'`：仅返回 `condition` 列的值等于 `'value'` 的记录（如状态为“已完成”的订单，或部门为“销售”的员工）。  \n\n---\n\n### **业务场景**  \n1. **示例场景**：  \n   - 如果 `table1` 是订单表，`condition` 是订单状态（`status`），`'value'` 是 `'shipped'`，则查询可能是为了获取所有已发货订单的核心信息（如订单ID、客户ID、发货日期等）。  \n   - 如果 `table1` 是用户表，`condition` 是用户类型（`user_type`），`'value'` 是 `'premium'`，则查询可能是为了提取所有高级会员的详细信息（如姓名、注册时间、联系方式等）。  \n\n2. **通用用途**：  \n   - 数据筛选：从大表中提取符合特定条件的子集。  \n   - 报表生成：为业务分析提供特定状态或类别的数据。  \n\n---\n\n### **用户描述**  \n1. **实际问题**：  \n   - 用户可能需要快速查看某一类数据（如“所有未处理的客服工单”或“特定地区的销售记录”），但手动筛选效率低下。  \n   - 业务部门需要定期统计特定状态的数据（如每周活跃用户、库存不足的商品），用于决策支持。  \n\n2. **用户需求**：  \n   - 通过简单的条件查询，高效获取目标数据，避免全表扫描。  \n   - 仅关注关键字段（如查询订单时不需要返回冗余的备注信息），提升查询性能和结果可读性。  \n\n---\n\n### **补充说明**  \n- 实际业务中，`condition` 和 `'value'` 需替换为具体字段和值（如 `status = 'completed'`）。  \n- 若 `table1` 数据量庞大，建议对 `condition` 字段建立索引以优化查询速度。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]