[
  {
    "idx": 150,
    "sql_query": "SELECT column1, column2, column3 FROM table1 WHERE column4 IN ('value1', 'value2', 'value3', 'value4', 'value5', 'value6') ORDER BY column7;",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nSELECT column1, column2, column3 FROM table1 WHERE column4 IN ('value1', 'value2', 'value3', 'value4', 'value5', 'value6') ORDER BY column7;\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 150,
    "problem_description": "### 查询意图：\n该 SQL 语句的目的是从 `table1` 表中筛选出 `column4` 列值为 `'value1'` 到 `'value6'` 之一的记录，并返回这些记录的 `column1`、`column2` 和 `column3` 列的值，最后按照 `column7` 列的值进行排序。\n\n### 详细描述：\n1. **涉及的表**：`table1` 是该查询的唯一数据来源表。\n2. **选择的列**：\n   - `column1`、`column2`、`column3`：查询结果中需要返回的列。\n   - `column4`：用于筛选记录的列，其值必须在指定的列表中（`'value1'` 到 `'value6'`）。\n   - `column7`：用于对结果进行排序的列。\n3. **条件**：\n   - `WHERE column4 IN ('value1', 'value2', 'value3', 'value4', 'value5', 'value6')`：仅选择 `column4` 的值等于列表中任意一个值的记录。\n4. **排序**：\n   - `ORDER BY column7`：查询结果将按照 `column7` 列的值升序（默认）或降序排列。\n\n### 业务场景：\n1. **数据筛选**：该查询适用于需要从大量数据中筛选出特定类别的记录的场景。例如：\n   - 筛选特定状态（如订单状态为“待处理”、“处理中”、“已完成”等）的记录。\n   - 筛选特定类型（如产品类型为“电子产品”、“家居用品”、“服装”等）的记录。\n2. **数据展示**：查询结果可以用于生成报表、数据分析或前端展示，例如：\n   - 显示特定类别的产品列表。\n   - 统计特定状态的订单数量或详情。\n3. **排序需求**：结果按 `column7` 排序，可能用于：\n   - 按时间（如创建时间、更新时间）排序。\n   - 按优先级或其他业务逻辑排序。\n\n### 用户描述：\n1. **问题或需求**：\n   - 用户可能需要查看特定类别的数据（如特定状态或类型），而不是全部数据。\n   - 用户希望结果按照某种逻辑（如时间、优先级）有序展示，以便快速定位关键信息。\n2. **实际场景**：\n   - 例如，客服人员需要查看所有“待处理”和“处理中”的工单，并按创建时间排序，以便优先处理最早的工单。\n   - 又如，电商运营人员需要筛选出“电子产品”和“家居用品”类别的商品，并按销量排序，以便分析热门商品。\n\n### 总结：\n该 SQL 语句是一个典型的筛选和排序查询，适用于需要从表中提取特定类别数据并按某种规则排序的业务场景。其灵活性和通用性使其在多种实际应用中都非常有用。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### 查询意图：\n该 SQL 语句的目的是从 `table1` 表中筛选出 `column4` 列值为 `'value1'` 到 `'value6'` 之一的记录，并返回这些记录的 `column1`、`column2` 和 `column3` 列的值，最后按照 `column7` 列的值进行排序。\n\n### 详细描述：\n1. **涉及的表**：`table1` 是该查询的唯一数据来源表。\n2. **选择的列**：\n   - `column1`、`column2`、`column3`：查询结果中需要返回的列。\n   - `column4`：用于筛选记录的列，其值必须在指定的列表中（`'value1'` 到 `'value6'`）。\n   - `column7`：用于对结果进行排序的列。\n3. **条件**：\n   - `WHERE column4 IN ('value1', 'value2', 'value3', 'value4', 'value5', 'value6')`：仅选择 `column4` 的值等于列表中任意一个值的记录。\n4. **排序**：\n   - `ORDER BY column7`：查询结果将按照 `column7` 列的值升序（默认）或降序排列。\n\n### 业务场景：\n1. **数据筛选**：该查询适用于需要从大量数据中筛选出特定类别的记录的场景。例如：\n   - 筛选特定状态（如订单状态为“待处理”、“处理中”、“已完成”等）的记录。\n   - 筛选特定类型（如产品类型为“电子产品”、“家居用品”、“服装”等）的记录。\n2. **数据展示**：查询结果可以用于生成报表、数据分析或前端展示，例如：\n   - 显示特定类别的产品列表。\n   - 统计特定状态的订单数量或详情。\n3. **排序需求**：结果按 `column7` 排序，可能用于：\n   - 按时间（如创建时间、更新时间）排序。\n   - 按优先级或其他业务逻辑排序。\n\n### 用户描述：\n1. **问题或需求**：\n   - 用户可能需要查看特定类别的数据（如特定状态或类型），而不是全部数据。\n   - 用户希望结果按照某种逻辑（如时间、优先级）有序展示，以便快速定位关键信息。\n2. **实际场景**：\n   - 例如，客服人员需要查看所有“待处理”和“处理中”的工单，并按创建时间排序，以便优先处理最早的工单。\n   - 又如，电商运营人员需要筛选出“电子产品”和“家居用品”类别的商品，并按销量排序，以便分析热门商品。\n\n### 总结：\n该 SQL 语句是一个典型的筛选和排序查询，适用于需要从表中提取特定类别数据并按某种规则排序的业务场景。其灵活性和通用性使其在多种实际应用中都非常有用。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]