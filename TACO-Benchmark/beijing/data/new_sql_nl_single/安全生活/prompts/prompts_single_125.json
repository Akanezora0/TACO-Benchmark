[
  {
    "idx": 125,
    "sql_query": "SELECT column1, column2 FROM table1 WHERE condition1 = 'value1' AND condition2 > 10",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nSELECT column1, column2 FROM table1 WHERE condition1 = 'value1' AND condition2 > 10\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 125,
    "problem_description": "### **查询意图**：  \n该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并返回 `column1` 和 `column2` 两列的值。  \n\n### **详细描述**：  \n1. **涉及的表**：`table1`  \n   - 该查询从 `table1` 表中提取数据。  \n\n2. **涉及的列**：  \n   - **查询列**：`column1` 和 `column2`（最终返回的数据列）。  \n   - **条件列**：`condition1` 和 `condition2`（用于筛选数据的列）。  \n\n3. **筛选条件**：  \n   - `condition1 = 'value1'`：仅选择 `condition1` 列的值等于 `'value1'` 的行。  \n   - `condition2 > 10`：仅选择 `condition2` 列的值大于 `10` 的行。  \n   - 这两个条件通过 `AND` 连接，表示必须同时满足。  \n\n### **业务场景**：  \n该查询可用于以下业务场景：  \n- **数据筛选**：从 `table1` 中提取符合特定业务规则的数据。  \n- **报表生成**：获取满足条件的 `column1` 和 `column2` 数据，用于生成统计报表或数据分析。  \n- **业务规则应用**：例如，筛选出“状态为 `'value1'` 且数量超过 `10`”的记录，以便进行后续处理。  \n\n### **用户描述**：  \n在该业务场景下，用户可能遇到以下问题或需求：  \n1. **数据过滤需求**：用户需要找出符合特定业务规则的记录，例如“查找所有订单状态为 `'已确认'` 且金额超过 `10` 元的订单”。  \n2. **数据分析需求**：用户可能需要分析 `column1` 和 `column2` 的数据，但仅关注满足特定条件的数据子集。  \n3. **自动化处理需求**：例如，系统需要自动筛选出符合条件的记录，以便触发后续的业务流程（如发送通知、更新状态等）。  \n\n### **示例**（假设 `table1` 是订单表）：  \n- `column1` = `order_id`（订单ID）  \n- `column2` = `customer_name`（客户名称）  \n- `condition1` = `order_status`（订单状态，筛选 `'已确认'` 的订单）  \n- `condition2` = `total_amount`（订单总金额，筛选金额大于 `10` 元的订单）  \n\n**用户需求**：  \n“我需要找出所有状态为 `'已确认'` 且金额超过 `10` 元的订单，以便进行优先处理或发送优惠券。”  \n\n通过该 SQL 查询，用户可以快速获取符合条件的订单数据，从而支持业务决策或自动化操作。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**：  \n该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并返回 `column1` 和 `column2` 两列的值。  \n\n### **详细描述**：  \n1. **涉及的表**：`table1`  \n   - 该查询从 `table1` 表中提取数据。  \n\n2. **涉及的列**：  \n   - **查询列**：`column1` 和 `column2`（最终返回的数据列）。  \n   - **条件列**：`condition1` 和 `condition2`（用于筛选数据的列）。  \n\n3. **筛选条件**：  \n   - `condition1 = 'value1'`：仅选择 `condition1` 列的值等于 `'value1'` 的行。  \n   - `condition2 > 10`：仅选择 `condition2` 列的值大于 `10` 的行。  \n   - 这两个条件通过 `AND` 连接，表示必须同时满足。  \n\n### **业务场景**：  \n该查询可用于以下业务场景：  \n- **数据筛选**：从 `table1` 中提取符合特定业务规则的数据。  \n- **报表生成**：获取满足条件的 `column1` 和 `column2` 数据，用于生成统计报表或数据分析。  \n- **业务规则应用**：例如，筛选出“状态为 `'value1'` 且数量超过 `10`”的记录，以便进行后续处理。  \n\n### **用户描述**：  \n在该业务场景下，用户可能遇到以下问题或需求：  \n1. **数据过滤需求**：用户需要找出符合特定业务规则的记录，例如“查找所有订单状态为 `'已确认'` 且金额超过 `10` 元的订单”。  \n2. **数据分析需求**：用户可能需要分析 `column1` 和 `column2` 的数据，但仅关注满足特定条件的数据子集。  \n3. **自动化处理需求**：例如，系统需要自动筛选出符合条件的记录，以便触发后续的业务流程（如发送通知、更新状态等）。  \n\n### **示例**（假设 `table1` 是订单表）：  \n- `column1` = `order_id`（订单ID）  \n- `column2` = `customer_name`（客户名称）  \n- `condition1` = `order_status`（订单状态，筛选 `'已确认'` 的订单）  \n- `condition2` = `total_amount`（订单总金额，筛选金额大于 `10` 元的订单）  \n\n**用户需求**：  \n“我需要找出所有状态为 `'已确认'` 且金额超过 `10` 元的订单，以便进行优先处理或发送优惠券。”  \n\n通过该 SQL 查询，用户可以快速获取符合条件的订单数据，从而支持业务决策或自动化操作。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]