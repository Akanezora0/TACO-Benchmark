[
  {
    "idx": 43,
    "sql_query": "select column1, column2 from table1 where condition = 'value' order by column3 asc",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect column1, column2 from table1 where condition = 'value' order by column3 asc\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 43,
    "problem_description": "### 查询意图：\n该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并按照指定的列进行升序排序，最终返回 `column1` 和 `column2` 两列的数据。\n\n### 详细描述：\n1. **涉及的表**：`table1` 是该查询的主要表，所有数据都从该表中获取。\n2. **涉及的列**：\n   - `column1` 和 `column2`：查询结果中需要返回的列。\n   - `condition`：用于筛选数据的条件列。\n   - `column3`：用于对结果进行排序的列。\n3. **条件**：`condition = 'value'` 表示只选择 `condition` 列的值等于 `'value'` 的行。\n4. **排序**：`order by column3 asc` 表示查询结果将按照 `column3` 列的值升序排列（从小到大）。\n\n### 业务场景：\n1. **数据筛选与展示**：该查询可以用于从大量数据中筛选出符合特定条件的数据，并以有序的方式展示给用户。例如，筛选出某个特定状态（如“已完成”）的订单，并按照创建时间排序。\n2. **报表生成**：在生成报表时，可能需要提取特定条件下的数据并按照某种顺序排列，以便于分析或展示。\n3. **数据导出**：在需要导出部分数据时，可以通过该查询筛选出符合条件的数据并按照某种规则排序。\n\n### 用户描述：\n1. **问题或需求**：用户可能需要查看某个特定条件下的数据，并且希望这些数据能够按照某种逻辑顺序排列。例如：\n   - 一个电商平台的运营人员可能需要查看所有“已发货”的订单，并按照发货时间升序排列，以便跟踪最近的发货情况。\n   - 一个客服人员可能需要查看所有“高优先级”的客户投诉，并按照提交时间排序，以便优先处理最早的投诉。\n2. **实际场景**：用户在实际操作中可能面临数据量大、难以手动筛选和排序的问题，因此需要通过 SQL 查询快速、准确地获取所需数据。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### 查询意图：\n该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并按照指定的列进行升序排序，最终返回 `column1` 和 `column2` 两列的数据。\n\n### 详细描述：\n1. **涉及的表**：`table1` 是该查询的主要表，所有数据都从该表中获取。\n2. **涉及的列**：\n   - `column1` 和 `column2`：查询结果中需要返回的列。\n   - `condition`：用于筛选数据的条件列。\n   - `column3`：用于对结果进行排序的列。\n3. **条件**：`condition = 'value'` 表示只选择 `condition` 列的值等于 `'value'` 的行。\n4. **排序**：`order by column3 asc` 表示查询结果将按照 `column3` 列的值升序排列（从小到大）。\n\n### 业务场景：\n1. **数据筛选与展示**：该查询可以用于从大量数据中筛选出符合特定条件的数据，并以有序的方式展示给用户。例如，筛选出某个特定状态（如“已完成”）的订单，并按照创建时间排序。\n2. **报表生成**：在生成报表时，可能需要提取特定条件下的数据并按照某种顺序排列，以便于分析或展示。\n3. **数据导出**：在需要导出部分数据时，可以通过该查询筛选出符合条件的数据并按照某种规则排序。\n\n### 用户描述：\n1. **问题或需求**：用户可能需要查看某个特定条件下的数据，并且希望这些数据能够按照某种逻辑顺序排列。例如：\n   - 一个电商平台的运营人员可能需要查看所有“已发货”的订单，并按照发货时间升序排列，以便跟踪最近的发货情况。\n   - 一个客服人员可能需要查看所有“高优先级”的客户投诉，并按照提交时间排序，以便优先处理最早的投诉。\n2. **实际场景**：用户在实际操作中可能面临数据量大、难以手动筛选和排序的问题，因此需要通过 SQL 查询快速、准确地获取所需数据。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]