[
  {
    "idx": 13,
    "sql_query": "select table1.column1 from table1 where column2 = value and column3 > (select max(column4) from table2 where column5 = value2 and column6 = value3) and column1 in (select column7 from table3 where column8 = value4)",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect table1.column1 from table1 where column2 = value and column3 > (select max(column4) from table2 where column5 = value2 and column6 = value3) and column1 in (select column7 from table3 where column8 = value4)\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 13,
    "problem_description": "### **查询意图**  \n该 SQL 语句的目的是从 `table1` 中筛选出符合特定条件的 `column1` 值，这些条件包括：  \n1. `column2` 必须等于某个固定值（`value`）。  \n2. `column3` 必须大于子查询返回的最大值（从 `table2` 中筛选出符合 `column5 = value2` 和 `column6 = value3` 的记录，并计算 `column4` 的最大值）。  \n3. `column1` 必须在另一个子查询的结果集中（从 `table3` 中筛选出 `column8 = value4` 的记录，并返回 `column7` 的值）。  \n\n### **详细描述**  \n1. **主表与主列**：  \n   - 主表是 `table1`，查询的目标列是 `table1.column1`。  \n   - 筛选条件涉及 `table1` 的 `column2` 和 `column3`。  \n\n2. **子查询 1（最大值计算）**：  \n   - 从 `table2` 中筛选出 `column5 = value2` 且 `column6 = value3` 的记录。  \n   - 计算这些记录中 `column4` 的最大值（`max(column4)`）。  \n   - 主查询要求 `table1.column3` 必须大于这个最大值。  \n\n3. **子查询 2（IN 子查询）**：  \n   - 从 `table3` 中筛选出 `column8 = value4` 的记录。  \n   - 返回这些记录的 `column7` 值。  \n   - 主查询要求 `table1.column1` 必须在这个结果集中（`IN` 条件）。  \n\n### **业务场景**  \n1. **数据筛选**：  \n   - 查询可能是为了找出 `table1` 中满足多重条件的记录，例如：  \n     - 某个特定分类（`column2 = value`）。  \n     - 数值超过某个动态阈值（`column3` 大于 `table2` 中某类记录的最大值）。  \n     - 属于某个特定集合（`column1` 在 `table3` 的某类记录中）。  \n\n2. **动态阈值计算**：  \n   - 子查询 1 的动态计算可能用于业务规则，例如：  \n     - 找出 `table1` 中 `column3` 超过 `table2` 中某类记录最高值的记录。  \n\n3. **关联数据验证**：  \n   - 子查询 2 可能用于验证 `table1.column1` 是否属于某个有效列表（如白名单、关联表等）。  \n\n### **用户描述**  \n用户可能遇到的实际问题或需求包括：  \n1. **业务规则过滤**：  \n   - 例如，筛选出“销售额（`column3`）超过某类商品最高历史销售额（`table2` 中的 `column4`）的商品（`column1`），且这些商品属于某个特定类别（`column2 = value`）和某个促销活动（`column1` 在 `table3` 的活动商品列表中）”。  \n\n2. **动态阈值分析**：  \n   - 用户可能需要找出“当前某些指标（如库存、价格、绩效）超过历史最高值或特定条件的记录”。  \n\n3. **数据关联查询**：  \n   - 例如，找出“某个部门的员工（`table1`），其绩效（`column3`）高于另一张表中某类项目的最高分（`table2`），并且这些员工参与了某个特定项目（`table3`）”。  \n\n### **总结**  \n该 SQL 是一个复杂的多条件查询，结合了静态条件（`column2 = value`）、动态阈值（子查询 1）和关联验证（子查询 2），适用于需要精确筛选和动态计算的业务场景。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**  \n该 SQL 语句的目的是从 `table1` 中筛选出符合特定条件的 `column1` 值，这些条件包括：  \n1. `column2` 必须等于某个固定值（`value`）。  \n2. `column3` 必须大于子查询返回的最大值（从 `table2` 中筛选出符合 `column5 = value2` 和 `column6 = value3` 的记录，并计算 `column4` 的最大值）。  \n3. `column1` 必须在另一个子查询的结果集中（从 `table3` 中筛选出 `column8 = value4` 的记录，并返回 `column7` 的值）。  \n\n### **详细描述**  \n1. **主表与主列**：  \n   - 主表是 `table1`，查询的目标列是 `table1.column1`。  \n   - 筛选条件涉及 `table1` 的 `column2` 和 `column3`。  \n\n2. **子查询 1（最大值计算）**：  \n   - 从 `table2` 中筛选出 `column5 = value2` 且 `column6 = value3` 的记录。  \n   - 计算这些记录中 `column4` 的最大值（`max(column4)`）。  \n   - 主查询要求 `table1.column3` 必须大于这个最大值。  \n\n3. **子查询 2（IN 子查询）**：  \n   - 从 `table3` 中筛选出 `column8 = value4` 的记录。  \n   - 返回这些记录的 `column7` 值。  \n   - 主查询要求 `table1.column1` 必须在这个结果集中（`IN` 条件）。  \n\n### **业务场景**  \n1. **数据筛选**：  \n   - 查询可能是为了找出 `table1` 中满足多重条件的记录，例如：  \n     - 某个特定分类（`column2 = value`）。  \n     - 数值超过某个动态阈值（`column3` 大于 `table2` 中某类记录的最大值）。  \n     - 属于某个特定集合（`column1` 在 `table3` 的某类记录中）。  \n\n2. **动态阈值计算**：  \n   - 子查询 1 的动态计算可能用于业务规则，例如：  \n     - 找出 `table1` 中 `column3` 超过 `table2` 中某类记录最高值的记录。  \n\n3. **关联数据验证**：  \n   - 子查询 2 可能用于验证 `table1.column1` 是否属于某个有效列表（如白名单、关联表等）。  \n\n### **用户描述**  \n用户可能遇到的实际问题或需求包括：  \n1. **业务规则过滤**：  \n   - 例如，筛选出“销售额（`column3`）超过某类商品最高历史销售额（`table2` 中的 `column4`）的商品（`column1`），且这些商品属于某个特定类别（`column2 = value`）和某个促销活动（`column1` 在 `table3` 的活动商品列表中）”。  \n\n2. **动态阈值分析**：  \n   - 用户可能需要找出“当前某些指标（如库存、价格、绩效）超过历史最高值或特定条件的记录”。  \n\n3. **数据关联查询**：  \n   - 例如，找出“某个部门的员工（`table1`），其绩效（`column3`）高于另一张表中某类项目的最高分（`table2`），并且这些员工参与了某个特定项目（`table3`）”。  \n\n### **总结**  \n该 SQL 是一个复杂的多条件查询，结合了静态条件（`column2 = value`）、动态阈值（子查询 1）和关联验证（子查询 2），适用于需要精确筛选和动态计算的业务场景。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]