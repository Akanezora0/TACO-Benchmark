[
  {
    "idx": 33,
    "sql_query": "select distinct 列名1 from 表名1 where 列名2 = 值) as 子查询别名,\n列名3\nfrom 表名3\nwhere 列名4 < 子查询别名.列名1",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect distinct 列名1 from 表名1 where 列名2 = 值) as 子查询别名,\n列名3\nfrom 表名3\nwhere 列名4 < 子查询别名.列名1\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 33,
    "problem_description": "### **查询意图**  \n该 SQL 语句的主要目的是从 `表名3` 中筛选出满足特定条件的记录，其中条件涉及一个子查询的结果。具体来说，它先通过子查询获取 `表名1` 中符合 `列名2 = 值` 的 `列名1` 的唯一值，然后在主查询中筛选 `表名3` 中 `列名4` 小于子查询结果中 `列名1` 的记录，并返回 `列名3` 和子查询结果。\n\n---\n\n### **详细描述**  \n1. **子查询部分**  \n   - 查询的表：`表名1`  \n   - 查询的列：`列名1`（使用 `distinct` 去重）  \n   - 条件：`列名2 = 值`  \n   - 结果别名：`子查询别名`  \n\n   该子查询的作用是从 `表名1` 中筛选出 `列名2` 等于某个特定值的记录，并返回这些记录中 `列名1` 的唯一值集合。\n\n2. **主查询部分**  \n   - 查询的表：`表名3`  \n   - 查询的列：`子查询别名.列名1`（子查询的结果）和 `列名3`  \n   - 条件：`列名4 < 子查询别名.列名1`  \n\n   主查询从 `表名3` 中筛选出 `列名4` 小于子查询结果中 `列名1` 的记录，并返回 `列名3` 和子查询结果。\n\n3. **查询逻辑**  \n   - 先执行子查询，获取 `表名1` 中满足 `列名2 = 值` 的 `列名1` 的唯一值。  \n   - 然后，主查询将 `表名3` 的 `列名4` 与子查询结果中的 `列名1` 进行比较，筛选出 `列名4` 更小的记录。  \n\n---\n\n### **业务场景**  \n1. **可能的表关系**  \n   - `表名1` 可能是一个存储关键信息的表（如产品表、用户表等），`列名2` 是某个筛选条件字段（如产品类别、用户状态等），`列名1` 可能是某种 ID 或数值型字段（如价格、分数等）。  \n   - `表名3` 可能是另一个相关表（如订单表、日志表等），`列名4` 可能是某种数值型字段（如金额、时间戳等），`列名3` 可能是需要查询的具体信息（如订单号、日志内容等）。  \n\n2. **业务逻辑**  \n   - 该查询可能用于筛选出 `表名3` 中某些数值（`列名4`）低于 `表名1` 中特定条件下记录的值（`列名1`）的数据。  \n   - 例如：  \n     - 查询所有价格低于某类产品最高价格的订单。  \n     - 查询所有分数低于某个班级平均分的学生记录。  \n\n---\n\n### **用户描述**  \n1. **用户需求**  \n   - 用户可能需要找出某些记录，这些记录在某个维度（如价格、分数、时间等）上低于另一组特定记录的值。  \n   - 例如：  \n     - 财务人员想找出所有金额低于某类产品基准价的交易记录。  \n     - 教师想找出所有成绩低于班级前 10% 平均分的学生。  \n\n2. **实际问题**  \n   - 用户需要动态地基于一组条件（子查询）筛选另一组数据，而不是硬编码比较值。  \n   - 用户希望避免多次查询，而是通过一条 SQL 语句直接获取结果。  \n\n---\n\n### **总结**  \n该 SQL 语句的核心是通过子查询动态获取比较基准，然后在主查询中筛选出满足比较条件的数据。适用于需要基于另一组数据动态筛选的场景，提高了查询的灵活性和效率。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**  \n该 SQL 语句的主要目的是从 `表名3` 中筛选出满足特定条件的记录，其中条件涉及一个子查询的结果。具体来说，它先通过子查询获取 `表名1` 中符合 `列名2 = 值` 的 `列名1` 的唯一值，然后在主查询中筛选 `表名3` 中 `列名4` 小于子查询结果中 `列名1` 的记录，并返回 `列名3` 和子查询结果。\n\n---\n\n### **详细描述**  \n1. **子查询部分**  \n   - 查询的表：`表名1`  \n   - 查询的列：`列名1`（使用 `distinct` 去重）  \n   - 条件：`列名2 = 值`  \n   - 结果别名：`子查询别名`  \n\n   该子查询的作用是从 `表名1` 中筛选出 `列名2` 等于某个特定值的记录，并返回这些记录中 `列名1` 的唯一值集合。\n\n2. **主查询部分**  \n   - 查询的表：`表名3`  \n   - 查询的列：`子查询别名.列名1`（子查询的结果）和 `列名3`  \n   - 条件：`列名4 < 子查询别名.列名1`  \n\n   主查询从 `表名3` 中筛选出 `列名4` 小于子查询结果中 `列名1` 的记录，并返回 `列名3` 和子查询结果。\n\n3. **查询逻辑**  \n   - 先执行子查询，获取 `表名1` 中满足 `列名2 = 值` 的 `列名1` 的唯一值。  \n   - 然后，主查询将 `表名3` 的 `列名4` 与子查询结果中的 `列名1` 进行比较，筛选出 `列名4` 更小的记录。  \n\n---\n\n### **业务场景**  \n1. **可能的表关系**  \n   - `表名1` 可能是一个存储关键信息的表（如产品表、用户表等），`列名2` 是某个筛选条件字段（如产品类别、用户状态等），`列名1` 可能是某种 ID 或数值型字段（如价格、分数等）。  \n   - `表名3` 可能是另一个相关表（如订单表、日志表等），`列名4` 可能是某种数值型字段（如金额、时间戳等），`列名3` 可能是需要查询的具体信息（如订单号、日志内容等）。  \n\n2. **业务逻辑**  \n   - 该查询可能用于筛选出 `表名3` 中某些数值（`列名4`）低于 `表名1` 中特定条件下记录的值（`列名1`）的数据。  \n   - 例如：  \n     - 查询所有价格低于某类产品最高价格的订单。  \n     - 查询所有分数低于某个班级平均分的学生记录。  \n\n---\n\n### **用户描述**  \n1. **用户需求**  \n   - 用户可能需要找出某些记录，这些记录在某个维度（如价格、分数、时间等）上低于另一组特定记录的值。  \n   - 例如：  \n     - 财务人员想找出所有金额低于某类产品基准价的交易记录。  \n     - 教师想找出所有成绩低于班级前 10% 平均分的学生。  \n\n2. **实际问题**  \n   - 用户需要动态地基于一组条件（子查询）筛选另一组数据，而不是硬编码比较值。  \n   - 用户希望避免多次查询，而是通过一条 SQL 语句直接获取结果。  \n\n---\n\n### **总结**  \n该 SQL 语句的核心是通过子查询动态获取比较基准，然后在主查询中筛选出满足比较条件的数据。适用于需要基于另一组数据动态筛选的场景，提高了查询的灵活性和效率。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]