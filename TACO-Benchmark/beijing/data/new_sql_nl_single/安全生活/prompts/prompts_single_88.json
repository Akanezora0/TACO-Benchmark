[
  {
    "idx": 88,
    "sql_query": "select distinct table1.column1, table1.column2, table2.column3 \nfrom table1 \njoin table2 on table1.common_column = table2.common_column \nwhere table1.condition_column = 'condition_value'",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect distinct table1.column1, table1.column2, table2.column3 \nfrom table1 \njoin table2 on table1.common_column = table2.common_column \nwhere table1.condition_column = 'condition_value'\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 88,
    "problem_description": "- **查询意图**：该 SQL 语句的目的是从两个关联表中查询满足特定条件的唯一数据组合。\n\n- **详细描述**：\n  - **涉及的表**：\n    - `table1`：主表之一，包含`column1`、`column2`和`common_column`等列。\n    - `table2`：被关联的表，包含`column3`和`common_column`等列。\n  - **关联条件**：通过`common_column`列将`table1`和`table2`关联起来，确保两表中该列的值相等。\n  - **查询列**：\n    - `table1.column1`：来自`table1`的第一列。\n    - `table1.column2`：来自`table1`的第二列。\n    - `table2.column3`：来自`table2`的第三列。\n  - **筛选条件**：`table1.condition_column = 'condition_value'`，即只选择`table1`中`condition_column`列等于`'condition_value'`的记录。\n  - **去重处理**：使用`distinct`关键字确保查询结果中的每一行都是唯一的。\n\n- **业务场景**：\n  - 该查询可以用于需要从两个关联表中提取特定信息的场景，例如：\n    - 查询某个特定条件下的客户信息及其关联的订单详情。\n    - 获取满足特定条件的商品及其对应的供应商信息。\n    - 在数据分析中，提取特定条件下的数据组合以生成报表。\n\n- **用户描述**：\n  - 用户可能需要查找所有满足特定条件的记录，并且这些记录需要包含来自两个不同表的信息。例如：\n    - 一个电商平台的管理员可能需要查看所有购买了特定类别商品的客户及其订单详情。\n    - 一个供应链经理可能需要获取所有库存量低于阈值的商品及其供应商的联系方式。\n    - 数据分析师可能需要生成一个报表，显示特定时间段内活跃用户及其活动详情。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n- **查询意图**：该 SQL 语句的目的是从两个关联表中查询满足特定条件的唯一数据组合。\n\n- **详细描述**：\n  - **涉及的表**：\n    - `table1`：主表之一，包含`column1`、`column2`和`common_column`等列。\n    - `table2`：被关联的表，包含`column3`和`common_column`等列。\n  - **关联条件**：通过`common_column`列将`table1`和`table2`关联起来，确保两表中该列的值相等。\n  - **查询列**：\n    - `table1.column1`：来自`table1`的第一列。\n    - `table1.column2`：来自`table1`的第二列。\n    - `table2.column3`：来自`table2`的第三列。\n  - **筛选条件**：`table1.condition_column = 'condition_value'`，即只选择`table1`中`condition_column`列等于`'condition_value'`的记录。\n  - **去重处理**：使用`distinct`关键字确保查询结果中的每一行都是唯一的。\n\n- **业务场景**：\n  - 该查询可以用于需要从两个关联表中提取特定信息的场景，例如：\n    - 查询某个特定条件下的客户信息及其关联的订单详情。\n    - 获取满足特定条件的商品及其对应的供应商信息。\n    - 在数据分析中，提取特定条件下的数据组合以生成报表。\n\n- **用户描述**：\n  - 用户可能需要查找所有满足特定条件的记录，并且这些记录需要包含来自两个不同表的信息。例如：\n    - 一个电商平台的管理员可能需要查看所有购买了特定类别商品的客户及其订单详情。\n    - 一个供应链经理可能需要获取所有库存量低于阈值的商品及其供应商的联系方式。\n    - 数据分析师可能需要生成一个报表，显示特定时间段内活跃用户及其活动详情。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]