[
  {
    "idx": 109,
    "sql_query": "select column1 from table1 where condition1 = value1 and condition2 = value2",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect column1 from table1 where condition1 = value1 and condition2 = value2\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 109,
    "problem_description": "- **查询意图**：该 SQL 语句的目的是从表 `table1` 中筛选出满足条件 `condition1 = value1` 和 `condition2 = value2` 的记录，并返回这些记录的 `column1` 列的值。\n\n- **详细描述**：\n  - **表**：`table1` 是该查询操作的目标表。\n  - **列**：`column1` 是查询结果中需要返回的列，`condition1` 和 `condition2` 是用于筛选记录的列。\n  - **条件**：查询的条件是 `condition1 = value1` 和 `condition2 = value2`，即只有同时满足这两个条件的记录才会被选中。\n  - **操作**：该查询是一个简单的 SELECT 语句，通过 WHERE 子句对记录进行筛选，最终返回符合条件的记录的 `column1` 列的值。\n\n- **业务场景**：\n  - 该查询可以用于多种业务场景，例如：\n    - **用户管理**：假设 `table1` 是用户表，`condition1` 是用户状态（如 `status = 'active'`），`condition2` 是用户角色（如 `role = 'admin'`），那么该查询可以用于获取所有活跃的管理员用户的 `column1`（如用户名或用户ID）。\n    - **订单管理**：假设 `table1` 是订单表，`condition1` 是订单状态（如 `status = 'completed'`），`condition2` 是订单日期（如 `order_date = '2023-01-01'`），那么该查询可以用于获取所有在 2023 年 1 月 1 日完成的订单的 `column1`（如订单号或客户ID）。\n    - **库存管理**：假设 `table1` 是库存表，`condition1` 是产品类别（如 `category = 'electronics'`），`condition2` 是库存数量（如 `quantity > 0`），那么该查询可以用于获取所有有库存的电子产品的 `column1`（如产品名称或产品ID）。\n\n- **用户描述**：\n  - 在上述业务场景中，用户可能遇到的实际问题或需求包括：\n    - **用户管理**：管理员需要快速获取所有活跃的管理员用户列表，以便进行权限管理或发送通知。\n    - **订单管理**：财务团队需要查询特定日期的已完成订单，以便进行对账或生成报表。\n    - **库存管理**：销售人员需要了解哪些电子产品有库存，以便向客户推荐或处理订单。\n\n总之，该 SQL 语句是一个基础但非常实用的查询，可以根据具体的业务需求灵活应用于不同的场景中。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n- **查询意图**：该 SQL 语句的目的是从表 `table1` 中筛选出满足条件 `condition1 = value1` 和 `condition2 = value2` 的记录，并返回这些记录的 `column1` 列的值。\n\n- **详细描述**：\n  - **表**：`table1` 是该查询操作的目标表。\n  - **列**：`column1` 是查询结果中需要返回的列，`condition1` 和 `condition2` 是用于筛选记录的列。\n  - **条件**：查询的条件是 `condition1 = value1` 和 `condition2 = value2`，即只有同时满足这两个条件的记录才会被选中。\n  - **操作**：该查询是一个简单的 SELECT 语句，通过 WHERE 子句对记录进行筛选，最终返回符合条件的记录的 `column1` 列的值。\n\n- **业务场景**：\n  - 该查询可以用于多种业务场景，例如：\n    - **用户管理**：假设 `table1` 是用户表，`condition1` 是用户状态（如 `status = 'active'`），`condition2` 是用户角色（如 `role = 'admin'`），那么该查询可以用于获取所有活跃的管理员用户的 `column1`（如用户名或用户ID）。\n    - **订单管理**：假设 `table1` 是订单表，`condition1` 是订单状态（如 `status = 'completed'`），`condition2` 是订单日期（如 `order_date = '2023-01-01'`），那么该查询可以用于获取所有在 2023 年 1 月 1 日完成的订单的 `column1`（如订单号或客户ID）。\n    - **库存管理**：假设 `table1` 是库存表，`condition1` 是产品类别（如 `category = 'electronics'`），`condition2` 是库存数量（如 `quantity > 0`），那么该查询可以用于获取所有有库存的电子产品的 `column1`（如产品名称或产品ID）。\n\n- **用户描述**：\n  - 在上述业务场景中，用户可能遇到的实际问题或需求包括：\n    - **用户管理**：管理员需要快速获取所有活跃的管理员用户列表，以便进行权限管理或发送通知。\n    - **订单管理**：财务团队需要查询特定日期的已完成订单，以便进行对账或生成报表。\n    - **库存管理**：销售人员需要了解哪些电子产品有库存，以便向客户推荐或处理订单。\n\n总之，该 SQL 语句是一个基础但非常实用的查询，可以根据具体的业务需求灵活应用于不同的场景中。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]