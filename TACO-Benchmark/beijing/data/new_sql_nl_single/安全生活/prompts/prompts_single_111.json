[
  {
    "idx": 111,
    "sql_query": "select column1, column2 from table1 where condition1 = value1 and condition2 = value2 order by column3 asc",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect column1, column2 from table1 where condition1 = value1 and condition2 = value2 order by column3 asc\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 111,
    "problem_description": "- **查询意图**：该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并返回 `column1` 和 `column2` 两列的值，同时按照 `column3` 列的升序排列结果。\n\n- **详细描述**：\n  - **涉及的表**：`table1` 是该查询的主要表，数据将从该表中提取。\n  - **涉及的列**：\n    - `column1` 和 `column2` 是查询结果中需要返回的列。\n    - `condition1` 和 `condition2` 是用于筛选数据的条件列。\n    - `column3` 是用于排序的列。\n  - **条件**：\n    - `condition1 = value1` 和 `condition2 = value2` 是筛选数据的条件，只有满足这两个条件的行才会被选中。\n  - **排序**：查询结果将按照 `column3` 列的升序（从小到大）排列。\n\n- **业务场景**：\n  - 假设 `table1` 是一个订单表，`column1` 是订单编号，`column2` 是客户名称，`condition1` 是订单状态，`value1` 是“已支付”，`condition2` 是订单日期，`value2` 是“2023-10-01”，`column3` 是订单金额。那么该查询可以用于获取所有在 2023 年 10 月 1 日已支付的订单编号和客户名称，并按订单金额从小到大排序。\n  - 另一个可能的场景是 `table1` 是一个学生成绩表，`column1` 是学生姓名，`column2` 是课程名称，`condition1` 是学期，`value1` 是“2023-2024学年第一学期”，`condition2` 是课程类型，`value2` 是“必修”，`column3` 是成绩。该查询可以用于获取 2023-2024 学年第一学期所有必修课的学生姓名和课程名称，并按成绩升序排列。\n\n- **用户描述**：\n  - 在订单表的场景中，用户可能需要查看特定日期已支付的订单，以便进行财务对账或客户服务跟进。按订单金额排序可以帮助用户快速识别小额或大额订单。\n  - 在学生成绩表的场景中，教师可能需要查看特定学期必修课的学生成绩，以便进行成绩分析或教学评估。按成绩升序排列可以帮助教师快速识别成绩较低的学生，以便提供额外的辅导或支持。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n- **查询意图**：该 SQL 语句的目的是从 `table1` 表中筛选出满足特定条件的数据，并返回 `column1` 和 `column2` 两列的值，同时按照 `column3` 列的升序排列结果。\n\n- **详细描述**：\n  - **涉及的表**：`table1` 是该查询的主要表，数据将从该表中提取。\n  - **涉及的列**：\n    - `column1` 和 `column2` 是查询结果中需要返回的列。\n    - `condition1` 和 `condition2` 是用于筛选数据的条件列。\n    - `column3` 是用于排序的列。\n  - **条件**：\n    - `condition1 = value1` 和 `condition2 = value2` 是筛选数据的条件，只有满足这两个条件的行才会被选中。\n  - **排序**：查询结果将按照 `column3` 列的升序（从小到大）排列。\n\n- **业务场景**：\n  - 假设 `table1` 是一个订单表，`column1` 是订单编号，`column2` 是客户名称，`condition1` 是订单状态，`value1` 是“已支付”，`condition2` 是订单日期，`value2` 是“2023-10-01”，`column3` 是订单金额。那么该查询可以用于获取所有在 2023 年 10 月 1 日已支付的订单编号和客户名称，并按订单金额从小到大排序。\n  - 另一个可能的场景是 `table1` 是一个学生成绩表，`column1` 是学生姓名，`column2` 是课程名称，`condition1` 是学期，`value1` 是“2023-2024学年第一学期”，`condition2` 是课程类型，`value2` 是“必修”，`column3` 是成绩。该查询可以用于获取 2023-2024 学年第一学期所有必修课的学生姓名和课程名称，并按成绩升序排列。\n\n- **用户描述**：\n  - 在订单表的场景中，用户可能需要查看特定日期已支付的订单，以便进行财务对账或客户服务跟进。按订单金额排序可以帮助用户快速识别小额或大额订单。\n  - 在学生成绩表的场景中，教师可能需要查看特定学期必修课的学生成绩，以便进行成绩分析或教学评估。按成绩升序排列可以帮助教师快速识别成绩较低的学生，以便提供额外的辅导或支持。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]