[
  {
    "idx": 12,
    "sql_query": "SELECT column1 FROM table1 WHERE (column2, column3) = (value1, value2) OR (column4, column5) = (value3, value4)",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nSELECT column1 FROM table1 WHERE (column2, column3) = (value1, value2) OR (column4, column5) = (value3, value4)\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 12,
    "problem_description": "### **查询意图**  \n该 SQL 语句的目的是从 `table1` 表中查询满足特定组合条件的记录，并返回这些记录的 `column1` 值。  \n\n### **详细描述**  \n1. **涉及的表**：  \n   - `table1`：查询的目标表。  \n\n2. **涉及的列**：  \n   - `column1`：查询结果返回的列。  \n   - `column2` 和 `column3`：第一组条件列，需要同时匹配 `(value1, value2)`。  \n   - `column4` 和 `column5`：第二组条件列，需要同时匹配 `(value3, value4)`。  \n\n3. **查询条件**：  \n   - 使用 `(column2, column3) = (value1, value2)` 表示 `column2` 必须等于 `value1` **且** `column3` 必须等于 `value2`。  \n   - 使用 `(column4, column5) = (value3, value4)` 表示 `column4` 必须等于 `value3` **且** `column5` 必须等于 `value4`。  \n   - 两个条件通过 `OR` 连接，表示只要满足其中任意一组条件即可返回结果。  \n\n### **业务场景**  \n该查询可能适用于以下业务场景：  \n1. **多条件匹配查询**：  \n   - 例如，在用户管理系统中，可能需要查找符合特定用户名和密码组合的用户，或者符合特定邮箱和手机号的用户。  \n2. **复合键查询**：  \n   - 如果 `(column2, column3)` 或 `(column4, column5)` 是某种复合业务键（如地区代码+门店编号），该查询可以用于检查是否存在符合特定组合的记录。  \n3. **灵活筛选数据**：  \n   - 例如，在订单系统中，可能需要查询满足特定（订单状态, 支付方式）组合，或者（客户类型, 地区）组合的订单。  \n\n### **用户描述**  \n1. **用户需求**：  \n   - 用户可能需要查找符合两种不同组合条件的数据，例如：  \n     - 查找“VIP客户且来自北京” **或者** “普通客户但消费金额超过1000元”的用户。  \n     - 查找“状态为‘已完成’且支付方式为‘信用卡’” **或者** “状态为‘待发货’且物流方式为‘顺丰’”的订单。  \n2. **实际问题**：  \n   - 用户希望在一个查询中灵活匹配多种组合条件，而不需要多次查询或使用复杂的 `AND/OR` 嵌套逻辑。  \n   - 该查询提供了一种简洁的方式，同时匹配多列组合，提高查询效率。  \n\n### **总结**  \n该 SQL 语句适用于需要同时匹配多列组合条件的场景，通过 `OR` 连接不同的组合，使查询更加灵活高效。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**  \n该 SQL 语句的目的是从 `table1` 表中查询满足特定组合条件的记录，并返回这些记录的 `column1` 值。  \n\n### **详细描述**  \n1. **涉及的表**：  \n   - `table1`：查询的目标表。  \n\n2. **涉及的列**：  \n   - `column1`：查询结果返回的列。  \n   - `column2` 和 `column3`：第一组条件列，需要同时匹配 `(value1, value2)`。  \n   - `column4` 和 `column5`：第二组条件列，需要同时匹配 `(value3, value4)`。  \n\n3. **查询条件**：  \n   - 使用 `(column2, column3) = (value1, value2)` 表示 `column2` 必须等于 `value1` **且** `column3` 必须等于 `value2`。  \n   - 使用 `(column4, column5) = (value3, value4)` 表示 `column4` 必须等于 `value3` **且** `column5` 必须等于 `value4`。  \n   - 两个条件通过 `OR` 连接，表示只要满足其中任意一组条件即可返回结果。  \n\n### **业务场景**  \n该查询可能适用于以下业务场景：  \n1. **多条件匹配查询**：  \n   - 例如，在用户管理系统中，可能需要查找符合特定用户名和密码组合的用户，或者符合特定邮箱和手机号的用户。  \n2. **复合键查询**：  \n   - 如果 `(column2, column3)` 或 `(column4, column5)` 是某种复合业务键（如地区代码+门店编号），该查询可以用于检查是否存在符合特定组合的记录。  \n3. **灵活筛选数据**：  \n   - 例如，在订单系统中，可能需要查询满足特定（订单状态, 支付方式）组合，或者（客户类型, 地区）组合的订单。  \n\n### **用户描述**  \n1. **用户需求**：  \n   - 用户可能需要查找符合两种不同组合条件的数据，例如：  \n     - 查找“VIP客户且来自北京” **或者** “普通客户但消费金额超过1000元”的用户。  \n     - 查找“状态为‘已完成’且支付方式为‘信用卡’” **或者** “状态为‘待发货’且物流方式为‘顺丰’”的订单。  \n2. **实际问题**：  \n   - 用户希望在一个查询中灵活匹配多种组合条件，而不需要多次查询或使用复杂的 `AND/OR` 嵌套逻辑。  \n   - 该查询提供了一种简洁的方式，同时匹配多列组合，提高查询效率。  \n\n### **总结**  \n该 SQL 语句适用于需要同时匹配多列组合条件的场景，通过 `OR` 连接不同的组合，使查询更加灵活高效。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]