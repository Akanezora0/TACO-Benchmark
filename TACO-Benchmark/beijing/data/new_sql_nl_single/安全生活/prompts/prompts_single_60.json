[
  {
    "idx": 60,
    "sql_query": "SELECT column1 AS alias1, column2 AS alias2, column3 AS alias3 FROM table1 WHERE condition = 'value' ORDER BY column4 DESC",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nSELECT column1 AS alias1, column2 AS alias2, column3 AS alias3 FROM table1 WHERE condition = 'value' ORDER BY column4 DESC\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 60,
    "problem_description": "### **查询意图**  \n该 SQL 语句的目的是从 `table1` 表中筛选符合特定条件的数据，并返回指定的列（`column1`、`column2`、`column3`），同时对这些列进行重命名（`alias1`、`alias2`、`alias3`），最后按照 `column4` 列的降序（`DESC`）排列结果。\n\n---\n\n### **详细描述**  \n1. **表（FROM）**：  \n   - 查询的数据来源是 `table1` 表。\n\n2. **列（SELECT）**：  \n   - 查询返回三列数据：`column1`、`column2`、`column3`，并分别将它们重命名为 `alias1`、`alias2`、`alias3`（可能是为了增强可读性或适配业务需求）。\n\n3. **条件（WHERE）**：  \n   - 筛选条件为 `condition = 'value'`，即只选择 `condition` 列的值等于 `'value'` 的记录。\n\n4. **排序（ORDER BY）**：  \n   - 结果按照 `column4` 列的降序（`DESC`）排列，即从大到小或从最新到最旧（如果 `column4` 是时间或数值类型）。\n\n---\n\n### **业务场景**  \n1. **数据筛选与展示**：  \n   - 该查询适用于需要从表中提取特定条件下的数据，并以某种逻辑排序展示的场景。例如：\n     - 查询某个状态（`condition = 'value'`）的订单，并按照订单金额（`column4`）降序排列。\n     - 获取某个类别的产品信息，并按照发布日期（`column4`）从新到旧排序。\n\n2. **报表或分析**：  \n   - 可能用于生成报表，例如统计满足条件的客户、交易或日志记录，并按关键字段排序以便分析。\n\n3. **用户界面展示**：  \n   - 前端页面可能需要显示过滤后的数据（如“已完成的订单”），并按时间或优先级排序。\n\n---\n\n### **用户描述**  \n1. **用户需求**：  \n   - 用户可能需要查看特定条件下的数据，例如：\n     - “我只想看到状态为‘已完成’的订单，并按订单金额从高到低排列。”\n     - “请列出所有‘促销中’的商品，并按上架时间从最新到最早排序。”\n\n2. **实际问题**：  \n   - 如果数据量较大，用户无法手动筛选和排序，需要通过 SQL 快速获取目标数据。\n   - 列重命名（`AS`）可能是为了适配前端字段名或提高可读性（如将 `order_date` 显示为“订单日期”）。\n\n3. **典型场景示例**：  \n   - 电商后台：管理员需要查看所有“已发货”的订单，并按订单总价降序排列，以便优先处理高价值订单。\n   - 内容管理系统：编辑需要筛选“已发布”的文章，并按发布时间降序排列，方便管理最新内容。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**  \n该 SQL 语句的目的是从 `table1` 表中筛选符合特定条件的数据，并返回指定的列（`column1`、`column2`、`column3`），同时对这些列进行重命名（`alias1`、`alias2`、`alias3`），最后按照 `column4` 列的降序（`DESC`）排列结果。\n\n---\n\n### **详细描述**  \n1. **表（FROM）**：  \n   - 查询的数据来源是 `table1` 表。\n\n2. **列（SELECT）**：  \n   - 查询返回三列数据：`column1`、`column2`、`column3`，并分别将它们重命名为 `alias1`、`alias2`、`alias3`（可能是为了增强可读性或适配业务需求）。\n\n3. **条件（WHERE）**：  \n   - 筛选条件为 `condition = 'value'`，即只选择 `condition` 列的值等于 `'value'` 的记录。\n\n4. **排序（ORDER BY）**：  \n   - 结果按照 `column4` 列的降序（`DESC`）排列，即从大到小或从最新到最旧（如果 `column4` 是时间或数值类型）。\n\n---\n\n### **业务场景**  \n1. **数据筛选与展示**：  \n   - 该查询适用于需要从表中提取特定条件下的数据，并以某种逻辑排序展示的场景。例如：\n     - 查询某个状态（`condition = 'value'`）的订单，并按照订单金额（`column4`）降序排列。\n     - 获取某个类别的产品信息，并按照发布日期（`column4`）从新到旧排序。\n\n2. **报表或分析**：  \n   - 可能用于生成报表，例如统计满足条件的客户、交易或日志记录，并按关键字段排序以便分析。\n\n3. **用户界面展示**：  \n   - 前端页面可能需要显示过滤后的数据（如“已完成的订单”），并按时间或优先级排序。\n\n---\n\n### **用户描述**  \n1. **用户需求**：  \n   - 用户可能需要查看特定条件下的数据，例如：\n     - “我只想看到状态为‘已完成’的订单，并按订单金额从高到低排列。”\n     - “请列出所有‘促销中’的商品，并按上架时间从最新到最早排序。”\n\n2. **实际问题**：  \n   - 如果数据量较大，用户无法手动筛选和排序，需要通过 SQL 快速获取目标数据。\n   - 列重命名（`AS`）可能是为了适配前端字段名或提高可读性（如将 `order_date` 显示为“订单日期”）。\n\n3. **典型场景示例**：  \n   - 电商后台：管理员需要查看所有“已发货”的订单，并按订单总价降序排列，以便优先处理高价值订单。\n   - 内容管理系统：编辑需要筛选“已发布”的文章，并按发布时间降序排列，方便管理最新内容。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]