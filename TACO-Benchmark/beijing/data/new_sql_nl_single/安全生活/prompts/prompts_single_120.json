[
  {
    "idx": 120,
    "sql_query": "select table1.column1, table1.column2 from table1 where table1.common_column = (select distinct table2.column3 from table2 where table2.unique_column = 'value')",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect table1.column1, table1.column2 from table1 where table1.common_column = (select distinct table2.column3 from table2 where table2.unique_column = 'value')\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 120,
    "problem_description": "### **查询意图**  \n该 SQL 语句的目的是从 `table1` 中查询符合条件的记录，具体是 `column1` 和 `column2` 列的值，其筛选条件是 `table1.common_column` 的值等于子查询返回的唯一值。  \n\n### **详细描述**  \n1. **主查询部分**：  \n   - 查询的表：`table1`  \n   - 查询的列：`column1` 和 `column2`  \n   - 筛选条件：`table1.common_column` 的值必须等于子查询返回的结果。  \n\n2. **子查询部分**：  \n   - 查询的表：`table2`  \n   - 查询的列：`column3`（使用 `DISTINCT` 确保唯一值）  \n   - 筛选条件：`table2.unique_column = 'value'`（即 `unique_column` 必须匹配指定的字符串 `'value'`）  \n\n3. **关联方式**：  \n   - 子查询返回一个唯一值（由于使用了 `DISTINCT`），然后主查询使用该值匹配 `table1.common_column` 的值。  \n\n### **业务场景**  \n该查询可能适用于以下业务场景：  \n- **数据关联查询**：`table1` 和 `table2` 之间存在某种关联关系，`common_column` 和 `column3` 可能是外键或业务关键字段。  \n- **条件筛选**：用户希望先根据 `table2` 中的某个特定条件（`unique_column = 'value'`）找到对应的 `column3` 值，然后在 `table1` 中查找匹配的记录。  \n- **唯一值匹配**：由于子查询使用了 `DISTINCT`，说明业务上可能要求 `column3` 的值在匹配时必须是唯一的，避免多值导致主查询返回错误数据。  \n\n### **用户描述**  \n用户可能遇到的实际问题或需求包括：  \n1. **查找关联数据**：  \n   - 例如，`table2` 存储了某种配置或关键信息（如商品类别、用户权限等），而 `table1` 存储了具体的数据（如商品信息、用户订单等）。用户希望先确定某个特定的类别或权限（`unique_column = 'value'`），然后查找属于该类别或权限的所有数据。  \n\n2. **动态条件查询**：  \n   - 用户可能无法直接知道 `table1.common_column` 的具体值，而是需要先通过 `table2` 的某个条件（如名称、代码等）找到对应的值，再用于查询 `table1`。  \n\n3. **避免重复匹配**：  \n   - 由于子查询使用了 `DISTINCT`，说明业务上可能存在多个 `table2` 记录满足 `unique_column = 'value'`，但用户只关心 `column3` 的唯一值，确保主查询不会因为子查询返回多个值而出错。  \n\n**示例**：  \n- `table2` 可能是“部门表”，`unique_column` 是“部门名称”，`column3` 是“部门ID”。  \n- `table1` 可能是“员工表”，`common_column` 是“所属部门ID”。  \n- 用户希望查询“部门名称为 `'value'` 的所有员工信息（`column1` 和 `column2`）”。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**  \n该 SQL 语句的目的是从 `table1` 中查询符合条件的记录，具体是 `column1` 和 `column2` 列的值，其筛选条件是 `table1.common_column` 的值等于子查询返回的唯一值。  \n\n### **详细描述**  \n1. **主查询部分**：  \n   - 查询的表：`table1`  \n   - 查询的列：`column1` 和 `column2`  \n   - 筛选条件：`table1.common_column` 的值必须等于子查询返回的结果。  \n\n2. **子查询部分**：  \n   - 查询的表：`table2`  \n   - 查询的列：`column3`（使用 `DISTINCT` 确保唯一值）  \n   - 筛选条件：`table2.unique_column = 'value'`（即 `unique_column` 必须匹配指定的字符串 `'value'`）  \n\n3. **关联方式**：  \n   - 子查询返回一个唯一值（由于使用了 `DISTINCT`），然后主查询使用该值匹配 `table1.common_column` 的值。  \n\n### **业务场景**  \n该查询可能适用于以下业务场景：  \n- **数据关联查询**：`table1` 和 `table2` 之间存在某种关联关系，`common_column` 和 `column3` 可能是外键或业务关键字段。  \n- **条件筛选**：用户希望先根据 `table2` 中的某个特定条件（`unique_column = 'value'`）找到对应的 `column3` 值，然后在 `table1` 中查找匹配的记录。  \n- **唯一值匹配**：由于子查询使用了 `DISTINCT`，说明业务上可能要求 `column3` 的值在匹配时必须是唯一的，避免多值导致主查询返回错误数据。  \n\n### **用户描述**  \n用户可能遇到的实际问题或需求包括：  \n1. **查找关联数据**：  \n   - 例如，`table2` 存储了某种配置或关键信息（如商品类别、用户权限等），而 `table1` 存储了具体的数据（如商品信息、用户订单等）。用户希望先确定某个特定的类别或权限（`unique_column = 'value'`），然后查找属于该类别或权限的所有数据。  \n\n2. **动态条件查询**：  \n   - 用户可能无法直接知道 `table1.common_column` 的具体值，而是需要先通过 `table2` 的某个条件（如名称、代码等）找到对应的值，再用于查询 `table1`。  \n\n3. **避免重复匹配**：  \n   - 由于子查询使用了 `DISTINCT`，说明业务上可能存在多个 `table2` 记录满足 `unique_column = 'value'`，但用户只关心 `column3` 的唯一值，确保主查询不会因为子查询返回多个值而出错。  \n\n**示例**：  \n- `table2` 可能是“部门表”，`unique_column` 是“部门名称”，`column3` 是“部门ID”。  \n- `table1` 可能是“员工表”，`common_column` 是“所属部门ID”。  \n- 用户希望查询“部门名称为 `'value'` 的所有员工信息（`column1` 和 `column2`）”。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]