[
  {
    "idx": 42,
    "sql_query": "select T1.col1, T1.col2, T1.col3, T2.col4, T2.col5 from Table1 T1 left join Table2 T2 on T1.id = T2.id where T1.condition = 'value'",
    "stage": "problem_description",
    "prompt": "\n请阅读以下 SQL 语句，逐步分析并用详细的语言描述该 SQL 语句的查询意图，包括涉及的表、列、条件，以及可能的业务场景。\n\nSQL 语句：\nselect T1.col1, T1.col2, T1.col3, T2.col4, T2.col5 from Table1 T1 left join Table2 T2 on T1.id = T2.id where T1.condition = 'value'\n\n请按照以下格式输出：\n- **查询意图**：简要说明 SQL 语句的目的。\n- **详细描述**：详细解释查询涉及的表、列、条件等信息。\n- **业务场景**：查询到的表、列、条件等可以用来解决什么业务场景。\n- **用户描述**：上面的业务场景下用户可能遇到的实际问题或需求。\n"
  },
  {
    "idx": 42,
    "problem_description": "### **查询意图**：  \n该 SQL 语句的目的是从 `Table1` 和 `Table2` 中联合查询数据，以获取 `Table1` 中的部分列（`col1`、`col2`、`col3`）以及 `Table2` 中的部分列（`col4`、`col5`），并且仅筛选 `Table1` 中满足 `condition = 'value'` 条件的记录。  \n\n### **详细描述**：  \n1. **涉及的表**：  \n   - `Table1`（别名 `T1`）：主表，使用 `LEFT JOIN` 确保即使 `Table2` 中没有匹配记录，`Table1` 的数据也会被保留。  \n   - `Table2`（别名 `T2`）：关联表，通过 `id` 字段与 `Table1` 关联。  \n\n2. **查询的列**：  \n   - `T1.col1`、`T1.col2`、`T1.col3`：来自 `Table1` 的列。  \n   - `T2.col4`、`T2.col5`：来自 `Table2` 的列（如果 `Table2` 无匹配记录，则这些列返回 `NULL`）。  \n\n3. **关联条件**：  \n   - `T1.id = T2.id`：表示 `Table1` 和 `Table2` 通过 `id` 字段进行关联。  \n\n4. **筛选条件**：  \n   - `T1.condition = 'value'`：仅查询 `Table1` 中 `condition` 列等于 `'value'` 的记录。  \n\n### **业务场景**：  \n该查询可能用于以下业务场景：  \n- **数据关联查询**：例如，`Table1` 存储订单基本信息（如订单ID、客户信息、订单状态），`Table2` 存储订单详情（如商品信息、价格）。该查询可用于获取特定状态（`condition = 'value'`）的订单及其关联的商品信息。  \n- **数据补全查询**：例如，`Table1` 存储用户信息，`Table2` 存储用户扩展信息（如地址、联系方式）。该查询可用于获取部分用户（满足 `condition` 条件）的基本信息及其扩展信息（如果有）。  \n\n### **用户描述**：  \n在该业务场景下，用户可能遇到的实际问题或需求包括：  \n1. **订单管理**：用户需要查看所有“已支付”（`condition = 'paid'`）的订单及其对应的商品详情（`col4`、`col5`），以便进行发货或统计。  \n2. **用户分析**：用户需要获取“VIP用户”（`condition = 'VIP'`）的基本信息及其消费记录（存储在 `Table2`），以便进行精准营销。  \n3. **数据完整性检查**：用户希望查询某些特定条件下的主表记录，并关联查看是否有对应的辅助表数据（如检查某些用户是否填写了联系方式）。  \n\n该 SQL 语句适用于需要以主表数据为基础，关联查询辅助表信息，并按条件筛选的业务需求。",
    "stage": "natural_language_query",
    "prompt": "\n根据以下问题描述，模拟真实用户的提问，生成一段自然语言查询。要求如下：\n- 语言风格要符合真实场景中的用户提问，可能包含意图不明、信息冗余等特点。\n- 用户意图可能不够明确，用户无法指定具体要查询什么表或列，只描述自己遇到的场景，包含模糊或不确定的表述。\n- 用户偏向于详细描述自己遇到的场景，可能包含自己的个人信息或者相关事件的信息。\n- 表达方式可以不够专业，可能包含模糊或不确定的表述。\n- 有可能融入情感倾向，如抱怨、不满、疑惑等。\n\n严格要求：\n- **用户自然语言中不要出现具体的表名或列名，因为用户不了解底层数据库结构。**\n\n### 示例\n- 问题描述：\n查询顺义区杨镇汉石桥事地村的隐患名称，包括可能存在的卫生、安全等问题。\n- 自然语言查询：\n市民反映，顺义区杨镇汉石桥事地村，在桥头有售卖小孩玩的烟花爆竹，存在安全隐患，希望尽快进行核实处理，来电反映违规售卖烟花爆竹问题。\n\n### 示例\n- 问题描述：\n根据父母双方的姓名，在婚姻登记信息中查找有无存在对应记录。\n- 自然语言查询：\n市民反映，新生儿办理出生一件事的时候，显示父母双方小明和小红结婚证信息不匹配，自己的结婚证是22年3月25号在海淀区民政局登记的，希望能帮助核实处理一下是什么情况，来电反映结婚证信息不匹配问题。\n\n### 示例\n- 问题描述：\n查询这家企业在纳税方面有没有问题。\n- 自然语言查询：\n市民反映，通过拼多多购买北京金汇发商贸有限公司的可乐，地址：顺义区顺鑫石门农产品批发市场，但是购买后一直不给开发票，找各种理由推拖，订单号：240123149364469331471，来电反映金汇发不给开发票问题。\n\n\n### 问题描述：\n### **查询意图**：  \n该 SQL 语句的目的是从 `Table1` 和 `Table2` 中联合查询数据，以获取 `Table1` 中的部分列（`col1`、`col2`、`col3`）以及 `Table2` 中的部分列（`col4`、`col5`），并且仅筛选 `Table1` 中满足 `condition = 'value'` 条件的记录。  \n\n### **详细描述**：  \n1. **涉及的表**：  \n   - `Table1`（别名 `T1`）：主表，使用 `LEFT JOIN` 确保即使 `Table2` 中没有匹配记录，`Table1` 的数据也会被保留。  \n   - `Table2`（别名 `T2`）：关联表，通过 `id` 字段与 `Table1` 关联。  \n\n2. **查询的列**：  \n   - `T1.col1`、`T1.col2`、`T1.col3`：来自 `Table1` 的列。  \n   - `T2.col4`、`T2.col5`：来自 `Table2` 的列（如果 `Table2` 无匹配记录，则这些列返回 `NULL`）。  \n\n3. **关联条件**：  \n   - `T1.id = T2.id`：表示 `Table1` 和 `Table2` 通过 `id` 字段进行关联。  \n\n4. **筛选条件**：  \n   - `T1.condition = 'value'`：仅查询 `Table1` 中 `condition` 列等于 `'value'` 的记录。  \n\n### **业务场景**：  \n该查询可能用于以下业务场景：  \n- **数据关联查询**：例如，`Table1` 存储订单基本信息（如订单ID、客户信息、订单状态），`Table2` 存储订单详情（如商品信息、价格）。该查询可用于获取特定状态（`condition = 'value'`）的订单及其关联的商品信息。  \n- **数据补全查询**：例如，`Table1` 存储用户信息，`Table2` 存储用户扩展信息（如地址、联系方式）。该查询可用于获取部分用户（满足 `condition` 条件）的基本信息及其扩展信息（如果有）。  \n\n### **用户描述**：  \n在该业务场景下，用户可能遇到的实际问题或需求包括：  \n1. **订单管理**：用户需要查看所有“已支付”（`condition = 'paid'`）的订单及其对应的商品详情（`col4`、`col5`），以便进行发货或统计。  \n2. **用户分析**：用户需要获取“VIP用户”（`condition = 'VIP'`）的基本信息及其消费记录（存储在 `Table2`），以便进行精准营销。  \n3. **数据完整性检查**：用户希望查询某些特定条件下的主表记录，并关联查看是否有对应的辅助表数据（如检查某些用户是否填写了联系方式）。  \n\n该 SQL 语句适用于需要以主表数据为基础，关联查询辅助表信息，并按条件筛选的业务需求。\n\n请根据上述问题描述，生成对应的自然语言查询。\n"
  }
]