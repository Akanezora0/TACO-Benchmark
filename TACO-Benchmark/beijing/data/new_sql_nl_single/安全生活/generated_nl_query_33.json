{
  "sql": "select distinct 列名1 from 表名1 where 列名2 = 值) as 子查询别名,\n列名3\nfrom 表名3\nwhere 列名4 < 子查询别名.列名1",
  "problem_description": "### **查询意图**  \n该 SQL 语句的主要目的是从 `表名3` 中筛选出满足特定条件的记录，其中条件涉及一个子查询的结果。具体来说，它先通过子查询获取 `表名1` 中符合 `列名2 = 值` 的 `列名1` 的唯一值，然后在主查询中筛选 `表名3` 中 `列名4` 小于子查询结果中 `列名1` 的记录，并返回 `列名3` 和子查询结果。\n\n---\n\n### **详细描述**  \n1. **子查询部分**  \n   - 查询的表：`表名1`  \n   - 查询的列：`列名1`（使用 `distinct` 去重）  \n   - 条件：`列名2 = 值`  \n   - 结果别名：`子查询别名`  \n\n   该子查询的作用是从 `表名1` 中筛选出 `列名2` 等于某个特定值的记录，并返回这些记录中 `列名1` 的唯一值集合。\n\n2. **主查询部分**  \n   - 查询的表：`表名3`  \n   - 查询的列：`子查询别名.列名1`（子查询的结果）和 `列名3`  \n   - 条件：`列名4 < 子查询别名.列名1`  \n\n   主查询从 `表名3` 中筛选出 `列名4` 小于子查询结果中 `列名1` 的记录，并返回 `列名3` 和子查询结果。\n\n3. **查询逻辑**  \n   - 先执行子查询，获取 `表名1` 中满足 `列名2 = 值` 的 `列名1` 的唯一值。  \n   - 然后，主查询将 `表名3` 的 `列名4` 与子查询结果中的 `列名1` 进行比较，筛选出 `列名4` 更小的记录。  \n\n---\n\n### **业务场景**  \n1. **可能的表关系**  \n   - `表名1` 可能是一个存储关键信息的表（如产品表、用户表等），`列名2` 是某个筛选条件字段（如产品类别、用户状态等），`列名1` 可能是某种 ID 或数值型字段（如价格、分数等）。  \n   - `表名3` 可能是另一个相关表（如订单表、日志表等），`列名4` 可能是某种数值型字段（如金额、时间戳等），`列名3` 可能是需要查询的具体信息（如订单号、日志内容等）。  \n\n2. **业务逻辑**  \n   - 该查询可能用于筛选出 `表名3` 中某些数值（`列名4`）低于 `表名1` 中特定条件下记录的值（`列名1`）的数据。  \n   - 例如：  \n     - 查询所有价格低于某类产品最高价格的订单。  \n     - 查询所有分数低于某个班级平均分的学生记录。  \n\n---\n\n### **用户描述**  \n1. **用户需求**  \n   - 用户可能需要找出某些记录，这些记录在某个维度（如价格、分数、时间等）上低于另一组特定记录的值。  \n   - 例如：  \n     - 财务人员想找出所有金额低于某类产品基准价的交易记录。  \n     - 教师想找出所有成绩低于班级前 10% 平均分的学生。  \n\n2. **实际问题**  \n   - 用户需要动态地基于一组条件（子查询）筛选另一组数据，而不是硬编码比较值。  \n   - 用户希望避免多次查询，而是通过一条 SQL 语句直接获取结果。  \n\n---\n\n### **总结**  \n该 SQL 语句的核心是通过子查询动态获取比较基准，然后在主查询中筛选出满足比较条件的数据。适用于需要基于另一组数据动态筛选的场景，提高了查询的灵活性和效率。",
  "natural_language_query": "市民反映，最近在核对公司财务数据时遇到一个问题。是这样的，我们公司有一批产品的参考价格，现在需要找出所有实际交易金额低于这批产品参考价格的订单记录。具体来说，这批产品是去年销量排名前10%的热门商品，它们的参考价格是单独制定的。我试过手动查，但数据量太大太麻烦了，能不能帮忙看看有没有什么办法可以一次性把这些低于参考价的订单都找出来？主要是想看看哪些客户的成交价低于了我们设定的标准价，好跟进处理。",
  "results": 0,
  "sql skeleton": "select _ ,_ from _ where _ = (select distinct _ from _ where _ = _ ) and _ < _",
  "database": "安全生活",
  "tables": {}
}